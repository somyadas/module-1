********************************************************************************************************************************************
				NAME :- PRATYUSH KUMAR SAHU
				EMPLOYEE ID :- 141076
				MODULE TEST 1 (PRACTICAL)
**********************************************************************************************************************************************

			SECTION 1 : PROGRAMMING FOUNDATION WITH PSEUDOCODE
-----------------------------------------------------------------------------------

1.Write a Pseudocode to perform calculator functionality. Accept the following numbers for calculation:primary
number,secondary number. Requirement for calculator functionality is : Addition, Substraction, Multiplication,
Division can be performed.

CODE:
-----

/*************************************************************************************************************
*	File				- 	Pseudo_Calculator.txt
*	Author				-	Pratyush Kumar Sahu
*	Desc				-	Performing basic Calculator Function
*	Version				-	1.0.0
*	Date				- 	12-DEC-2017

**************************************************************************************************************/

BEGIN
	DECLARE choice,primarynumber,secondarynumber AS INTEGER
	DECLARE result  AS FLOAT
	PROMPT "Enter your choice:		//Display  choices and store into a variable (choice)
		1.Addition
		2.Subtraction
		3.Multiplication
		4.Division"
	PROMPT "Enter two numbers:"
	ACCEPT primarynumber,secondarynumber	//2 nos entered is stored as primarynumber and secondarynumber
	ACCEPT choice
		IF(choice==1)THEN
			result=CALCULATE Add(primarynumber,secondarynumber)
			PRINT "The addition of two numbers is",result
		ELSE IF(choice==2)THEN
			result=CALCULATE Sub(primarynumber,secondarynumber)
			PRINT "The substraction of two numbers is",result
		ELSE IF(choice==3)THEN
			result=CALCULATE Mul(primarynumber,secondarynumber)
			PRINT "The multiplication of two numbers is",result
		ELSE IF(choice==4)THEN
			result=CALCULATE Sub(primarynumber,secondarynumber)
			PRINT "The division of two numbers is",result
			
		EXCEPTION					 //Exception handling case 
				WHEN InvalidInputException THEN
				PRINT ErrorMessage
		ELSE
			PRINT "Enter the valid choice"
		END IF
END
/**************************************************************************************************************
* 	Module Name         : Add()
* 	Input Parameters    : primarynumber,secondarynumber
* 	Return Type         : FLOAT
* 	Author              : Pratyush Kumar Sahu
* 	Creation Date       : 12-DEC-2017
* 	Description         : calculating the addition of two numbers
**************************************************************************************************************/

SUB Add(primarynumber,secoundarynumber)
	DECLARE result AS FLOAT
	CALCULATE result = primarynumber+secondarynumber	//performs addition
	RETURN result
END SUB

/**************************************************************************************************************
* 	Module Name         : Sub()
* 	Input Parameters    : primarynumber,secondarynumber
* 	Return Type         : FLOAT
* 	Author              : Pratyush Kumar Sahu
* 	Creation Date       : 12-DEC-2017
* 	Description         : calculating the Subtraction of two numbers
*************************************************************************************************************/

SUB Sub(primarynumber,secondarynumber)
	DECLARE result AS FLOAT
	CALCULATE result = primarynumber-secondarynumber	// performs substraction
	RETURN result
END SUB


/************************************************************************************************************
* 	Module Name         : Mul()
* 	Input Parameters    : primarynumber,secondarynumber
* 	Return Type         : FLOAT
* 	Author              : Pratyush Kumar Sahu
* 	Creation Date       : 12-DEC-2017
* 	Description         : calculating the Multiplication of two numbers
************************************************************************************************************/

SUB Mul(primarynumber,secondarynumber)
	DECLARE result AS FLOAT
	CALCULATE result = primarynumber*secondarynumber	// performs multiplication
	RETURN result
END SUB

/************************************************************************************************************
* 	Module Name         : Div()
* 	Input Parameters    : primarynumber,secondarynumber
* 	Return Type         : FLOAT
* 	Author              : Pratyush Kumar Sahu
* 	Creation Date       : 12-DEC-2017
* 	Description         : calculating the Division of two numbers
************************************************************************************************************/

SUB Div(primarynumber,secondarynumber)
	DECLARE result AS FLOAT
	CALCULATE resul = primarynumber/secondarynumber		//performs division
	RETURN result
	ELSE
		RAISE InvalidInputException("secondarynumber should not be zero") //Exception RAISED for 
	END IF									    denominator =0
END SUB



===============================================================================================================
***************************************************************************************************************
					SECTION 2:- UNIX
					-------------------
Give commands for the following :

1. To display list of all users who are currently logged in.

ans: who

OUTPUT:
	[admin@localhost ~]$ who
admin    tty1         2017-12-11 20:56 (:0)
admin    pts/0        2017-12-11 20:57 (:0.0)

-------------------------------------------------------------------------------------------------------

2. To find out only the list of directories.

ans: ls -d */

OUTPUT:
	[admin@localhost ~]$ ls -d */
Desktop/    Downloads/  Pictures/  Templates/  Videos/
Documents/  Music/      Public/    Unix/
-------------------------------------------------------------------------------------------------------

3. To display last 3 lines from a file.

ans: tail -3 lines.sh				// lines.sh is the script file name

OUTPUT:
	[admin@localhost ~]$ cat > lines.sh 	// CREATING A NEW SCRIPT FILE
	HELLO					// GIVE MESSAGE IN THE FILE
	MY NAME IS PRATYUSH
	I AM FROM BHUBANESWAR
	I AM WORKING AT CAPGEMINI
	I AM LIVING IN MUMBAI
	[admin@localhost ~]$ tail -3 lines.sh	//COMMAND
	I AM FROM BHUBANESWAR			// LAST 3 LINES IS DISPLAYED FROM MESSAGE IN FILE
	I AM WORKING AT CAPGEMINI
	I AM LIVING IN MUMBAI

-------------------------------------------------------------------------------------------------

SHELL SCRIPTING:
------------------------------------------------------

4.Write a program that takes the username as input and reports whether he/she has logged in or not.
  Perform necessary validations appropriately.

CODE:
-----
	echo "Enter username:"
	read user

	if [ "$user" == "$USER" ]
	then
        	echo "User is logged in !!!"
        	echo "the signed in user is : $USER"
	else
        	echo "User not logged in!!!"
	fi
~                             

OUTPUT:
--------
	[admin@localhost ~]$ vi check_user.sh
	[admin@localhost ~]$ chmod 777 check_user.sh	//Giving file permission to read,write and execute
	[admin@localhost ~]$ ./check_user.sh
	Enter username:
	admin						//output check case 1
	User is logged in !!!
	the signed in user is : admin
	[admin@localhost ~]$ ./check_user.sh
	Enter username:
	pratyush					//output check case 2
	User not logged in!!!


===============================================================================================================
***************************************************************************************************************

				SECTION 3- ORACLE:
				------------------

Q1.Write queries for the following ( SOLVE ANY 4 QUERIES):
************************************************************

1. Display the 5th Highest Salary record from EMP Table.

CODE:
-----
SQL> SELECT ENAME,SAL FROM EMP A WHERE &N =(SELECT COUNT(DISTINCT SAL) FROM EMP B WHERE A.SAL <= B.SAL);

OUTPUT:
-------

SQL> SELECT EMPNO,ENAME,SAL FROM EMP A WHERE &N =(SELECT COUNT(DISTINCT SAL) FROM EMP B WHERE A.SAL <= B.SAL);
Enter value for n: 5
old   1: SELECT EMPNO,ENAME,SAL FROM EMP A WHERE &N =(SELECT COUNT(DISTINCT SAL) FROM EMP B WHERE A.SAL <= B.SAL)
new   1: SELECT EMPNO,ENAME,SAL FROM EMP A WHERE 5 =(SELECT COUNT(DISTINCT SAL) FROM EMP B WHERE A.SAL <= B.SAL)

     EMPNO ENAME             SAL
---------- ---------- ----------
      7782 CLARK            2450

----------------------------------------------------------------------------------------------

2. Display all employees who have joined during the year 1981.

CODE:
-----
SQL> SELECT ENAME,HIREDATE FROM EMP WHERE TO_CHAR(HIREDATE,'YYYY')=1981;

OUTPUT:
-------
SQL> SELECT ENAME,HIREDATE FROM EMP WHERE TO_CHAR(HIREDATE,'YYYY')=1981;

ENAME      HIREDATE
---------- ---------
KING       17-NOV-81
BLAKE      01-MAY-81
CLARK      09-JUN-81
JONES      02-APR-81
MARTIN     28-SEP-81
ALLEN      20-FEB-81
TURNER     08-SEP-81
JAMES      03-DEC-81
WARD       22-FEB-81
FORD       03-DEC-81

10 rows selected.
----------------------------------------------------------------------	

3.Display the list of employees who joined in January of any year.

CODE:
-----
SQL> SELECT ENAME,HIREDATE FROM EMP WHERE TO_CHAR(HIREDATE,'MON')='JAN';


OUTPUT:
-------

SQL> SELECT ENAME,HIREDATE FROM EMP WHERE TO_CHAR(HIREDATE,'MON')='JAN';

ENAME      HIREDATE
---------- ---------
ADAMS      12-JAN-83
MILLER     23-JAN-82

------------------------------------------------------------------------------------------------

4. For each department, list the employee who has worked for the longest duration with the company.
   Show department name, employee name and number of days worked.

CODE:
-----
SQL> SELECT E.ENAME, D.DNAME, ROUND((SYSDATE-HIREDATE)/365,2) AS YEARS FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND ROUND(SYSDATE-HIREDATE) IN (SELECT MAX(ROUND(SYSDATE - E.HIREDATE)) FROM EMP E GROUP BY E.DEPTNO);

OUTPUT:
-------
SQL> SELECT E.ENAME, D.DNAME, ROUND((SYSDATE-HIREDATE)/365,2) AS YEARS FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND ROUND(SYSDATE-HIREDATE) IN (SELECT MAX(ROUND(SYSDATE - E.HIREDATE)) FROM EMP E GROUP BY E.DEPTNO);

ENAME      DNAME               YEARS
---------- -------------- ----------
CLARK      ACCOUNTING          36.54
ALLEN      SALES               36.83
SMITH      RESEARCH            37.01

---------------------------------------------------------------------------------------------------------
=========================================================================================================

Q2. Write a PL/SQL Block to display the Employee Details, Display Employee No.,Employee Name and Department no.
    pass dept_id as input. Hint:- Use CURSORS along with %ROWTYPE.

ANS:
-----

DECLARE
 V_DEPTID EMP.DEPTNO%TYPE;							--Variable to store dept no
 CURSOR CUR_EMP IS SELECT EMPNO,ENAME,DEPTNO FROM EMP WHERE DEPTNO=V_DEPTID;
 V_REC CUR_EMP%ROWTYPE;
 V_NULL EXCEPTION;								-- NULL Exception declared
BEGIN
 V_DEPTID:='&DEPTID';								-- accept deptid from users.
 IF V_DEPTID='' OR V_DEPTID IS NULL THEN
     RAISE V_NULL;								-- NULL exception raised if exists
 END IF;
  OPEN CUR_EMP;									-- Open Cursors
    LOOP
        FETCH CUR_EMP INTO V_REC;
	EXIT WHEN CUR_EMP%NOTFOUND;	
	DBMS_OUTPUT.PUT_LINE(   ' EMPLOYEE NO: ' || V_REC.EMPNO ||CHR(10)||
				' EMPLOYEE NAME '||V_REC.ENAME||CHR(10)||
				'DEPARTMENT NO:'||V_REC.DEPTNO);
    END LOOP;
  CLOSE CUR_EMP;								--End cursors
EXCEPTION 
	WHEN V_NULL THEN							-- display if Null exception exists
	DBMS_OUTPUT.PUT_LINE('NULL IS NOT ALLOWED....PLEASE INPUT A VALID DEPARTMENT ID.........!!!');
	WHEN OTHERS THEN							-- Others will handle all rest exceptions
	DBMS_OUTPUT.PUT_LINE('PLEASE INPUT A VALID DEPARTMENT ID.........!!!');
END;
/

the output:
Enter value for deptid: 10		--CASE 1 : CORRECT INPUT GIVEN BY USER
old   7:  V_DEPTID:='&DEPTID';
new   7:  V_DEPTID:='10';
EMPLOYEE NO: 7839
EMPLOYEE NAME KING
DEPARTMENT NO:10
EMPLOYEE NO: 7782
EMPLOYEE NAME CLARK
DEPARTMENT NO:10
EMPLOYEE NO: 7934
EMPLOYEE NAME MILLER
DEPARTMENT NO:10

PL/SQL procedure successfully completed.


SQL> /
Enter value for deptid: -300		--CASE 2 : WRONG USER INPUT
old   7:  V_DEPTID:='&DEPTID';
new   7:  V_DEPTID:='-300';
PLEASE INPUT A VALID DEPARTMENT ID.........!!!

PL/SQL procedure successfully completed.

SQL> /
Enter value for deptid: 500		--CASE 3 : WRONG DEPTID GIVEN BY USER
old   7:  V_DEPTID:='&DEPTID';
new   7:  V_DEPTID:='500';
PLEASE INPUT A VALID DEPARTMENT ID.........!!!

PL/SQL procedure successfully completed.

SQL> /
Enter value for deptid:			--CASE 4: WHEN USER DOES NOT ENTER ANY VALUE
old   7:  V_DEPTID:='&DEPTID';
new   7:  V_DEPTID:='';
NULL IS NOT ALLOWED....PLEASE INPUT A VALID DEPARTMENT ID.........!!!

PL/SQL procedure successfully completed.


--------------------------------------------------------------------------------------------------------------

Q3.Create a procedure to increase salary of employees by 10% who belong to Manager Cadre.
   During the update performed on these records,the other users should not be able to update them paralelly.

ANS:
----

SQL> select * from emp;

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7839 KING       PRESIDENT            17-NOV-81       5000                    10
      7698 BLAKE      MANAGER         7839 01-MAY-81       2850                    30
      7782 CLARK      MANAGER         7839 09-JUN-81       2450                    10
      7566 JONES      MANAGER         7839 02-APR-81       2975                    20
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400         30
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300         30
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500          0         30
      7900 JAMES      CLERK           7698 03-DEC-81        950                    30
      7521 WARD       SALESMAN        7698 22-FEB-81       1250        500         30
      7902 FORD       ANALYST         7566 03-DEC-81       3000                    20
      7369 SMITH      CLERK           7902 17-DEC-80        800                    20
      7788 SCOTT      ANALYST         7566 09-DEC-82       3000                    20
      7876 ADAMS      CLERK           7788 12-JAN-83       1100                    20
      7934 MILLER     CLERK           7782 23-JAN-82       1300                    10

14 rows selected.

SQL> CREATE OR REPLACE PROCEDURE PROC_SALHIKE IS
  2  CURSOR CUR_PROC IS SELECT sal FROM emp WHERE job='MANAGER'
  3  FOR UPDATE OF SAL NOWAIT;
  4  V_REC CUR_PROC%ROWTYPE;
  5  BEGIN
  6  	FOR V_REC IN CUR_PROC
  7  	LOOP
  8  		UPDATE EMP SET SAL = (V_REC.SAL + (V_REC.SAL*0.10))	--Updating Salary by incrementing 10%
  9  		WHERE CURRENT OF CUR_PROC;				-- "WHERE CURRENT OF" allows to update or delete the record that was fetched by cursor. 
 10  	END LOOP;
 11  END;
 12  /

Procedure created.

SQL> EXEC PROC_SALHIKE

PL/SQL procedure successfully completed.

SQL> SELECT * FROM EMP;					-- EMPLOYEE DETAILS AFTER 10% SALARY HIKE

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7839 KING       PRESIDENT            17-NOV-81       5000                    10
      7698 BLAKE      MANAGER         7839 01-MAY-81       3135                    30
      7782 CLARK      MANAGER         7839 09-JUN-81       2695                    10
      7566 JONES      MANAGER         7839 02-APR-81     3272.5                    20
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400         30
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300         30
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500          0         30
      7900 JAMES      CLERK           7698 03-DEC-81        950                    30
      7521 WARD       SALESMAN        7698 22-FEB-81       1250        500         30
      7902 FORD       ANALYST         7566 03-DEC-81       3000                    20
      7369 SMITH      CLERK           7902 17-DEC-80        800                    20
      7788 SCOTT      ANALYST         7566 09-DEC-82       3000                    20
      7876 ADAMS      CLERK           7788 12-JAN-83       1100                    20
      7934 MILLER     CLERK           7782 23-JAN-82       1300                    10

14 rows selected.



---------------------------------------------------------------------------------------------------------------

Q4.Write a PL/SQL Package related to HRMS containing procedures related to hiring new employees,updating the employee records,
   function to calculate the annual salary of each employee by accepting empno. Return calculated value.

ANS:
----

SQL> CREATE TABLE EMPLOYEES(EMPNO NUMBER(5),EMPNAME VARCHAR2(10),SAL NUMBER(10)); --CREATING TABLE

Table created.

CREATE OR REPLACE PACKAGE HRMS IS						--CREATING A PACKAGE

PROCEDURE INSERTING(V_EMP_NUM IN EMPLOYEES.EMPNO%TYPE,
				   V_EMP_NAME IN EMPLOYEES.EMPNAME%TYPE,
				   V_EMP_SAL IN EMPLOYEES.SAL%TYPE);
PROCEDURE UPDATING(V_EMP_NUM IN EMPLOYEES.EMPNO%TYPE,
				   V_EMP_NAME IN EMPLOYEES.EMPNAME%TYPE,
				   V_EMP_SAL IN EMPLOYEES.SAL%TYPE);
FUNCTION ANUAL_SAL(V_EMP IN NUMBER) RETURN NUMBER;
END;
/

Package created.


CREATE OR REPLACE PACKAGE BODY HRMS IS						--CREATING A PACKAGE BODY, INSERTING IN PRODURES
PROCEDURE INSERTING(V_EMP_NUM IN EMPLOYEES.EMPNO%TYPE,
				   V_EMP_NAME IN EMPLOYEES.EMPNAME%TYPE,
				   V_EMP_SAL IN EMPLOYEES.SAL%TYPE) IS
BEGIN
INSERT INTO EMPLOYEES(EMPNO, "EMPNAME", SAL)
  VALUES (V_EMP_NUM, V_EMP_NAME,V_EMP_SAL);
  COMMIT;
END;
PROCEDURE UPDATING(V_EMP_NUM IN EMPLOYEES.EMPNO%TYPE,
				   V_EMP_NAME IN EMPLOYEES.EMPNAME%TYPE,
				   V_EMP_SAL IN EMPLOYEES.SAL%TYPE) IS
BEGIN
UPDATE EMPLOYEES SET EMPNAME=V_EMP_NAME WHERE EMPNO = V_EMP_NUM;
UPDATE EMPLOYEES SET SAL=V_EMP_SAL WHERE EMPNO = V_EMP_NUM;
COMMIT;
END;
FUNCTION ANUAL_SAL(V_EMP IN NUMBER) RETURN NUMBER IS				--CREATING A FUNCTION TO CALCULATE ANNUAL SALARY
	V_EMP_ID NUMBER :=V_EMP;
	NUL EXCEPTION;								--DECLARING NULL EXCEPTION
	NEG EXCEPTION;								--DECLARING NEGATIVE EXCEPTION
	V_ANUAL_SAL NUMBER;
BEGIN
	IF V_EMP_ID = '' OR V_EMP_ID IS NULL THEN
		RAISE NUL;
	ELSIF V_EMP_ID<0 THEN
		RAISE NEG;
	ELSE
	SELECT SAL*12 INTO V_ANUAL_SAL FROM EMPLOYEES WHERE EMPNO=V_EMP_ID;
	RETURN V_ANUAL_SAL;
	END IF;
EXCEPTION									--EXCEPTION BLOCK STARTS
	WHEN NUL THEN
	RETURN NULL;
	WHEN NEG THEN
	RETURN NULL;
	WHEN OTHERS THEN							-- OTHERS WILL HANDLE ALL EXCEPTIONS RAISED
	RETURN NULL;	
END;
END;
/
	
Package body created.


/* INSERTING DATA INTO TABLE */
---------------------------------------
DECLARE
    NO NUMBER(10):= &NUM;
    NAME VARCHAR2(10):='&NAMEE';
    SAL NUMBER(10):=&SAL;
    BEGIN
    HRMS.INSERTING(NO,NAME,SAL);
    END;
    /
----->OUTPUT
SQL> DECLARE
  2      NO NUMBER(10):= &NUM;
  3      NAME VARCHAR2(10):='&NAMEE';
  4      SAL NUMBER(10):=&SAL;
  5      BEGIN
  6      HRMS.INSERTING(NO,NAME,SAL);
  7      END;
  8      /
Enter value for num: 100
Enter value for namee: PRATYUSH
Enter value for sal: 25000
 
PL/SQL procedure successfully completed.

SQL> /
Enter value for num: 101
Enter value for namee: KUMAR
Enter value for sal: 25000

PL/SQL procedure successfully completed.

SQL> /
Enter value for num: 102
Enter value for namee: SAHU
Enter value for sal: 22000

PL/SQL procedure successfully completed.

SQL> SELECT *FROM EMPLOYEES ;

     EMPNO EMPNAME           SAL
---------- ---------- ----------

       100 PRATYUSH           25000
       101 KUMAR              25000
       102 SAHU		      22000
/* UPDATING THE NAME AND SALARY*/
----------------------------------------------
DECLARE
    NO NUMBER(10):= &NUM;
    NAME VARCHAR2(10):='&NAMEE';
    SAL NUMBER(10):=&SAL;
    BEGIN
    HRMS.UPDATING(NO,NAME,SAL);
    END;
    /
-------->OUTPUT
SQL> DECLARE
  2      NO NUMBER(10):= &NUM;
  3      NAME VARCHAR2(10):='&NAMEE';
  4      SAL NUMBER(10):=&SAL;
  5      BEGIN
  6      HRMS.UPDATING(NO,NAME,SAL);
  7      END;
  8      /
Enter value for num: 102
Enter value for namee: SAHU
Enter value for sal: 21000

PL/SQL procedure successfully completed.

SQL> SELECT *FROM EMPLOYEES;

     EMPNO EMPNAME           SAL
---------- ---------- ----------

       100 PRATYUSH           25000
       101 KUMAR              25000
       102 SAHU               21000

/* GETTING ANUAL SALARY FOR AN EMPLOYEE */
-------------------------------------------------------------------
SQL> SELECT HRMS.ANUAL_SAL(102) FROM DUAL;

HRMS.ANUAL_SAL(102)
-------------------
             252000

SQL> SELECT HRMS.ANUAL_SAL(100) FROM DUAL;

HRMS.ANUAL_SAL(100)
--------------------
              300000



-------------------------------------------------------------------------------------------------------------------------

Q5. Write an anonymous single PL/SQL block to perform the following task:
    > In the declarative section, declare & initialize a variable of type NUMBER. assign a valid department no.
   
    > Declare a cursor which retrieves the employee name, salary and manager id of employees working in the department
      specified in the variable.
  
    > use cursor FOR loop to operate on the data retrieved. If salary of employee is less than 5000 and if manager id is 7839
      display the message <<Employee Name>> Due for a Raise. Otherwise display the message <<Employee Name>> Not due for a Raise.


ANS:
----
	SQL> ED ANONYMOUS.SQL

 DECLARE
    V_DEPARTMENT_ID NUMBER(10) := 30;  	           -- variable initialised to 30	
    CURSOR V_CUR_EMPLOYEE IS SELECT ENAME, SAL, MGR FROM EMP E WHERE
    E.DEPTNO = V_DEPARTMENT_ID;
 
 BEGIN
  	FOR V_REC in V_CUR_EMPLOYEE
    	LOOP
		IF V_REC.SAL<5000 AND V_REC.MGR = 7839
 		  THEN
   		  DBMS_OUTPUT.PUT_LINE(V_REC.ENAME||'  Due for a Raise');
   		ELSE
   		  DBMS_OUTPUT.PUT_LINE(V_REC.ENAME||' Not Due for a Raise');
		END IF;
   	END LOOP;
  END;
  /

OUTPUT: SQL> @ANONYMOUS.SQL 

BLAKE  Due for a Raise
MARTIN Not Due for a Raise
ALLEN Not Due for a Raise
TURNER Not Due for a Raise
JAMES Not Due for a Raise
WARD Not Due for a Raise

PL/SQL procedure successfully completed.





=================================================================================================================
############################################## 	END OF TEST	#################################################
=================================================================================================================
	

